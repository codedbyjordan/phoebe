import{Value as r}from"@sinclair/typebox/value";// ? Cloudflare worker support
let t="undefined"!=typeof Bun?Bun.env:"undefined"!=typeof process?process?.env:void 0;export const ERROR_CODE=Symbol("ErrorCode");export const isProduction=(t?.NODE_ENV??t?.ENV)==="production";export class InternalServerError extends Error{code="INTERNAL_SERVER_ERROR";status=500;constructor(r){super(r??"INTERNAL_SERVER_ERROR")}}export class NotFoundError extends Error{code="NOT_FOUND";status=404;constructor(r){super(r??"NOT_FOUND")}}export class ParseError extends Error{code="PARSE";status=400;constructor(r){super(r??"PARSE")}}export class InvalidCookieSignature extends Error{key;code;status;constructor(r,t){super(t??`"${r}" has invalid cookie signature`),this.key=r,this.code="INVALID_COOKIE_SIGNATURE",this.status=400}}export class ValidationError extends Error{type;validator;value;code;status;constructor(t,e,s){let o=isProduction?void 0:"Errors"in e?e.Errors(s).First():r.Errors(e,s).First(),i=o?.schema.error?"function"==typeof o.schema.error?o.schema.error(t,e,s):o.schema.error:void 0,a=isProduction?i??`Invalid ${t??o?.schema.error??o?.message}`:i??`Invalid ${t}, '${o?.path?.slice(1)||"type"}': ${o?.message}

Expected: `+// @ts-ignore
JSON.stringify(ValidationError.simplifyModel(e),null,2)+"\n\nFound: "+JSON.stringify(s,null,2);// +
// '\n\n' +
// 'Schema: ' +
// // @ts-ignore
// JSON.stringify(validator.schema, null, 2) +
// '\n'
super(a),this.type=t,this.validator=e,this.value=s,this.code="VALIDATION",this.status=400,Object.setPrototypeOf(this,ValidationError.prototype)}get all(){return[...this.validator.Errors(this.value)]}static simplifyModel(t){// @ts-ignore
let e="schema"in t?t.schema:t;try{return r.Create(e)}catch{return e}}get model(){return ValidationError.simplifyModel(this.validator)}toResponse(r){return new Response(this.message,{status:400,headers:r})}}